#include <Adafruit_NeoPixel.h>

#define BUTTON_PIN 1    // Digital IO pin connected to the button.  This will be
                          // driven with a pull-up resistor so the switch should
                          // pull the pin to ground momentarily.  On a high -> low
                          // transition the button press logic will execute.

#define PIN_RING_1    9   // Digital IO pin connected to the NeoPixels.
#define PIN_RING_2    10   // Digital IO pin connected to the NeoPixels.
#define PIN_RING_3    11   // Digital IO pin connected to the NeoPixels.


#define RING_1_COUNT 7   // number of neopixel (change this accordingly)
#define RING_2_COUNT 16   // number of neopixel (change this accordingly)
#define RING_3_COUNT 24   // number of neopixel (change this accordingly)



// NeoPixel luminosite, 0 (min) to 255 (max)
int BRIGHTNESS = 0;
// Pas du FADE
int FADEAMOUNT = 1;


// Parameter 1 = number of pixels in strip,  neopixel stick has 8
// Parameter 2 = pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_RGB     Pixels are wired for RGB bitstream
//   NEO_GRB     Pixels are wired for GRB bitstream, correct for neopixel stick
//   NEO_KHZ400  400 KHz bitstream (e.g. FLORA pixels)
//   NEO_KHZ800  800 KHz bitstream (e.g. High Density LED strip), correct for neopixel stick
Adafruit_NeoPixel ring_1 = Adafruit_NeoPixel(RING_1_COUNT, PIN_RING_1, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel ring_2 = Adafruit_NeoPixel(RING_2_COUNT, PIN_RING_2, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel ring_3 = Adafruit_NeoPixel(RING_3_COUNT, PIN_RING_3, NEO_GRB + NEO_KHZ800);


bool oldState = HIGH;
int showType = 0;

void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  ring_1.begin();
  ring_1.show(); // Initialize all ring_1 to 'off'

  ring_2.begin();
  ring_2.show(); // Initialize all ring_1 to 'off'

  ring_3.begin();
  ring_3.show(); // Initialize all ring_1 to 'off'


}

void loop() {
  // Get current button state.
  bool newState = digitalRead(BUTTON_PIN);

  // Check if state changed from high to low (button press).
  if (newState == LOW && oldState == HIGH) {
    // Short delay to debounce button.
    delay(20);
    // Check if button is still low after debounce.
    newState = digitalRead(BUTTON_PIN);
    if (newState == LOW) {
      showType++;
      if (showType > 9)
        showType=0;
      startShow(showType);
    }
  }

  // Set the last button state to the old state.
  oldState = newState;
}

void startShow(int i) {
  switch(i){
    case 0: colorWipe_1(ring_1.Color(0, 0, 0), 50);    // Black/off
            colorWipe_2(ring_2.Color(0, 0, 0), 50);    // Black/off
            colorWipe_3(ring_3.Color(0, 0, 0), 50);    // Black/off

            break;
    case 1: ring_1.setBrightness(255);
            ring_2.setBrightness(255);
            ring_3.setBrightness(255);
            blanc();
            break;
    case 2: ring_1.setBrightness(255);
            ring_2.setBrightness(255);
            ring_3.setBrightness(255);
            halo_bleu();
            break;
    case 3: BRIGHTNESS = 0;
            halo_bleu_fade();
            break;
    case 4: ring_1.setBrightness(255);
            ring_2.setBrightness(255);
            ring_3.setBrightness(255);
            halo_orange();
            break;
    case 5: BRIGHTNESS = 0;
            halo_orange_fade();
            break;
    case 6: ring_1.setBrightness(255);
            ring_2.setBrightness(255);
            ring_3.setBrightness(255);
            halo_violet();
            break;
    case 7: BRIGHTNESS = 0;
            halo_violet_fade();
            break;
    case 8: ring_1.setBrightness(255);
            ring_2.setBrightness(255);
            ring_3.setBrightness(255);
            halo_evo();
            break;
    case 9: BRIGHTNESS = 0;
            halo_evo_fade();
            break;
  }
}

void colorWipe_1(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<ring_1.numPixels(); i++) {
    ring_1.setPixelColor(i, c);
    ring_1.show();
    delay(wait);
  }
}

void colorWipe_2(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<ring_2.numPixels(); i++) {
    ring_2.setPixelColor(i, c);
    ring_2.show();
    delay(wait);
  }
}

void colorWipe_3(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<ring_3.numPixels(); i++) {
    ring_3.setPixelColor(i, c);
    ring_3.show();
    delay(wait);
  }
}



void blanc() {
  ring_1.fill(ring_1.Color(255,255,255));   // allume tout le bandeau
  ring_1.show();            // pour afficher les modifications

  ring_2.fill(ring_2.Color(255,255,255));   // allume tout le bandeau
  ring_2.show();            // pour afficher les modifications

  ring_3.fill(ring_3.Color(255,255,255));   // allume tout le bandeau
  ring_3.show();            // pour afficher les modifications
}

void halo_bleu() {
  ring_1.fill(ring_1.Color(0,0,255));   // allume tout le bandeau
  ring_1.show();            // pour afficher les modifications

  ring_2.fill(ring_2.Color(0,0,255));   // allume tout le bandeau
  ring_2.show();            // pour afficher les modifications

  ring_3.fill(ring_3.Color(255,255,255));   // allume tout le bandeau
  ring_3.show();            // pour afficher les modifications
}

void halo_bleu_fade() {
delay(500);
while (true) {
    ring_1.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_1.fill(ring_1.Color(0,0,255));   // allume tout le bandeau
    ring_1.show();            // pour afficher les modifications

    ring_2.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_2.fill(ring_2.Color(0,0,255));   // allume tout le bandeau
    ring_2.show();            // pour afficher les modifications

    ring_3.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_3.fill(ring_3.Color(255,255,255));   // allume tout le bandeau
    ring_3.show();            // pour afficher les modifications

    //Changement d'intensité de lumière
    BRIGHTNESS = BRIGHTNESS + FADEAMOUNT ;

    if (BRIGHTNESS == 0 || BRIGHTNESS == 255) {
      FADEAMOUNT = -FADEAMOUNT ;
    }
  delay (100);
  if (digitalRead(BUTTON_PIN) == 0) {
    break;
  }
  }
}

void halo_orange() {
  ring_1.fill(ring_1.Color(255,0,0));   // allume tout le bandeau
  ring_1.show();            // pour afficher les modifications

  ring_2.fill(ring_2.Color(255,0,0));   // allume tout le bandeau
  ring_2.show();            // pour afficher les modifications

  ring_3.fill(ring_3.Color(255,224,0));   // allume tout le bandeau
  ring_3.show();            // pour afficher les modifications
}

void halo_orange_fade() {
delay(500);
while (true) {
    ring_1.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_1.fill(ring_1.Color(255,0,0));   // allume tout le bandeau
    ring_1.show();            // pour afficher les modifications

    ring_2.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_2.fill(ring_2.Color(255,0,0));   // allume tout le bandeau
    ring_2.show();            // pour afficher les modifications

    ring_3.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_3.fill(ring_3.Color(255,224,0));   // allume tout le bandeau
    ring_3.show();            // pour afficher les modifications
    //Changement d'intensité de lumière
    BRIGHTNESS = BRIGHTNESS + FADEAMOUNT ;

    if (BRIGHTNESS == 0 || BRIGHTNESS == 255) {
      FADEAMOUNT = -FADEAMOUNT ;
    }
  delay (100);
  if (digitalRead(BUTTON_PIN) == 0) {
    break;
  }
  }
}

void halo_violet() {
  ring_1.fill(ring_1.Color(0,0,255));   // allume tout le bandeau
  ring_1.show();            // pour afficher les modifications

  ring_2.fill(ring_2.Color(0,0,255));   // allume tout le bandeau
  ring_2.show();            // pour afficher les modifications

  ring_3.fill(ring_3.Color(250,0,0));   // allume tout le bandeau
  ring_3.show();            // pour afficher les modifications
}

void halo_violet_fade() {
delay(500);
while (true) {
    ring_1.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_1.fill(ring_1.Color(0,0,255));   // allume tout le bandeau
    ring_1.show();            // pour afficher les modifications

    ring_2.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_2.fill(ring_2.Color(0,0,255));   // allume tout le bandeau
    ring_2.show();            // pour afficher les modifications

    ring_3.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_3.fill(ring_3.Color(255,0,0));   // allume tout le bandeau
    ring_3.show();            // pour afficher les modifications
    //Changement d'intensité de lumière
    BRIGHTNESS = BRIGHTNESS + FADEAMOUNT ;

    if (BRIGHTNESS == 0 || BRIGHTNESS == 255) {
      FADEAMOUNT = -FADEAMOUNT ;
    }
  delay (100);
  if (digitalRead(BUTTON_PIN) == 0) {
    break;
  }
  }
}

void halo_evo() {
  ring_1.fill(ring_1.Color(0,0,255));   // allume tout le bandeau
  ring_1.show();            // pour afficher les modifications

  ring_2.fill(ring_2.Color(255,0,0));   // allume tout le bandeau
  ring_2.show();            // pour afficher les modifications

  ring_3.fill(ring_3.Color(255,224,0));   // allume tout le bandeau
  ring_3.show();            // pour afficher les modifications

}

void halo_evo_fade() {
delay(500);
while (true) {
    ring_1.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_1.fill(ring_1.Color(0,0,255));   // allume tout le bandeau
    ring_1.show();            // pour afficher les modifications

    ring_2.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_2.fill(ring_2.Color(255,0,0));   // allume tout le bandeau
    ring_2.show();            // pour afficher les modifications

    ring_3.setBrightness(BRIGHTNESS); // Set BRIGHTNESS to about 1/5 (max = 255)
    ring_3.fill(ring_3.Color(255,224,0));   // allume tout le bandeau
    ring_3.show();            // pour afficher les modifications

    //Changement d'intensité de lumière
    BRIGHTNESS = BRIGHTNESS + FADEAMOUNT ;

    if (BRIGHTNESS == 0 || BRIGHTNESS == 255) {
      FADEAMOUNT = -FADEAMOUNT ;
    }
  delay (100);
  if (digitalRead(BUTTON_PIN) == 0) {
    break;
  }
  }
}
